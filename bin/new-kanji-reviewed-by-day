#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use DateTime;

my $anki = Anki::Database->new;
my $include_relearn = shift;

my @wipes;
my %kanji_known;
my $first_review;
my $now = time * 1000;

my @groups = ('rtk1', 'rtk3', 'rtks', 'other');
my %group_for;
my %negs;

$anki->each_card(sub {
  my ($card) = @_;

  my $kanji = $card->field('漢字');
  $group_for{$kanji} = $card->has_tag('rtk1') ? 'rtk1' : $card->has_tag('rtk3') ? 'rtk3' : $card->has_tag('rtks') ? 'rtks' : 'other';

  my @reviews = @{ $anki->reviews_for_card($card->id) };
  my @known;
  $kanji_known{$kanji} = \@known;

  for (@reviews) {
    my ($epoch_ms, $ease, undef, $type, $interval) = @$_;
    if (!defined($first_review) || $epoch_ms < $first_review) {
      $first_review = $epoch_ms;
    }

    if ($include_relearn) {
      # first review
      if (!@known) {
        push @known, [$epoch_ms, $epoch_ms + $interval * 24*60*60*1000];
      }
      # correct
      elsif ($ease > 1) {
        $known[-1][1] = $epoch_ms + $interval * 24*60*60*1000;
      }
      # incorrect
      else {
        my $ymd = DateTime->from_epoch(epoch => $epoch_ms / 1000)->ymd;
        $negs{$kanji}{$ymd} = 1;

	# charitably assume we forgot this just before the review
        if ($known[-1][1] > $epoch_ms - 24*60*60*1000) {
          $known[-1][1] = $epoch_ms - 24*60*60*1000;
	}
        push @known, [$epoch_ms, $epoch_ms];
      }
    }
    else {
      if ($type == 0) {
        if ($kanji eq '一') {
          push @wipes, $epoch_ms;
        }

        push @known, [$epoch_ms, $epoch_ms];
      }
      elsif ($ease > 1) {
        die $kanji if @known == 0;
        $known[-1][1] = $epoch_ms;
      }
    }
  }
}, '漢字');

if (!$include_relearn) {
  for my $kanji (keys %kanji_known) {
    my @all_known = @{ $kanji_known{$kanji} };
    for my $i (0 .. @all_known - 1) {
      my $known = $all_known[$i];
      my $next_known = $i < @all_known - 1 ? $all_known[$i + 1] : undef;
      for my $wipe (@wipes) {
        if ($known->[1] < $wipe && (!$next_known || $next_known->[0] >= $wipe)) {
          $known->[1] = $wipe;
        }
      }
  
      if (!$next_known && $known->[1] > $wipes[-1]) {
        $known->[1] = $now;
      }
    }
  }
}

my @dates;
{
  my $end_ymd = DateTime->from_epoch(epoch => $now / 1000)->ymd;
  my $dt = DateTime->from_epoch(epoch => $first_review / 1000);
  my $ymd = $dt->ymd;
  while ($ymd lt $end_ymd || $ymd eq $end_ymd) {
    push @dates, $ymd;
    $dt->add(days => 1);
    $ymd = $dt->ymd;
  }
}

my %by_date;
for my $kanji (keys %kanji_known) {
  my $group = $group_for{$kanji};
  for my $known (@{ $kanji_known{$kanji} }) {
    my ($start, $end) = @$known;
    my $end_ymd = DateTime->from_epoch(epoch => $end / 1000)->ymd;
    my $start_ymd = DateTime->from_epoch(epoch => $start / 1000)->ymd;
    for my $ymd (@dates) {
      if (($ymd gt $start_ymd || $ymd eq $start_ymd) && ($ymd lt $end_ymd || $end eq $end_ymd)) {
        $by_date{$ymd}{$group}++ unless $negs{$kanji}{$ymd};
      }
    }
  }
}

for my $date (sort keys %by_date) {
  say "$date: " . join(', ', map { $by_date{$date}{$_} || 0 } @groups);
}
