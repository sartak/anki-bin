#!/usr/bin/env perl
use 5.14.0;
use warnings;
use utf8::all;
use Anki::Database;
use DateTime;
use List::Util 'uniq';
use Anki::Morphology;

@ARGV == 0 || @ARGV == 1 or die "usage: $0 [print-correct]\n";
my $print_correct = $ARGV[1];

my $anki = Anki::Database->new;
my $morph = Anki::Morphology->new;

my %tsv_date_of;
my @tsv_words;
for ($morph->manual_canto_vocabulary) {
    my ($date, $word, $reading, $time) = @$_;
    push @tsv_words, $word;

    warn "$.: [$word] [$reading]: Leading whitespace\n" if $word =~ /^\s+/ || $reading =~ /^\s+/;
    warn "$.: [$word] [$reading]: Trailing whitespace\n" if $word =~ /\s+$/ || $reading =~ /\s+$/;

    if ($time) {
         my $dt = DateTime->from_epoch(epoch => $time);

	 # TODO
	 $dt->set_time_zone('America/New_York');
	 $dt->subtract(hours => 5);

	 $date = $dt->ymd;
    }
    $tsv_date_of{$word} = $date if !$tsv_date_of{$word} or $date lt $tsv_date_of{$word};
}

my %anki_date_of;

$anki->each_note(sub {
  my ($note) = @_;

  my $date = DateTime->from_epoch(epoch => $note->id/1000 - 10*3600)->ymd;
  my $sentence = $note->field('廣東話');
  my $reading_field = $note->field('発音') || '';
  my $nid = $note->id;

  s/<.*?>//g for $sentence, $reading_field;

  if (!$reading_field) {
    warn "$nid ($date): No readings for sentence:\n  $sentence\n\n";
    return;
  }

  my $results = $morph->canto_match_sentence_reading($sentence, $reading_field);

  if ($results->{no_parse}) {
    my @unknown = grep { $_->{type} eq 'unknown' } @{ $results->{no_parse} };
    warn "$nid ($date): Unable to parse this sentence:\n  $sentence\n  $reading_field\nmissing vocabulary for " . join('、', map { $_->{word} } @unknown) . "\n\n";
    return;
  }

  my ($parse) = sort { @{ $a->{morphemes} } <=> @{ $b->{morphemes} } } @{ $results->{correct} };

  if ($parse) {
    for my $morpheme (@{ $parse->{morphemes} }) {
      next unless $morpheme->{type} eq 'primary' || $morpheme->{type} eq 'modifier';
      my $word = $morpheme->{word};
      $anki_date_of{$word} = $date if !$anki_date_of{$word} || $date lt $anki_date_of{$word};
    }
    return;
  }

  my @misparses = @{ $results->{misparses} };

  my @suggestions;
  for my $misparse (@misparses) {
    my $word = $misparse->{word};
    my @expected = @{ $misparse->{expected} };
    my @sentence_readings = @{ $misparse->{sentence_readings} };
    my @sentence_readings_left = @{ $misparse->{sentence_readings_left} };

    my $start_caret = (length join " ", @sentence_readings) - (length join " ", @sentence_readings_left);
    my $caret_words = 0;
    for (@expected) {
      my @words = split ' ', $_;
      if ($caret_words < @words) {
        $caret_words = @words;
      }
    }
    $caret_words = @sentence_readings_left if $caret_words > @sentence_readings_left;

    my $caret_length = length join " ", @sentence_readings_left[0..$caret_words-1];
    my @suggestion;

    push @suggestion, join " ", map { $sentence_readings[$_] } 0 .. @sentence_readings - 1;
    push @suggestion, (" " x $start_caret) . ("^" x $caret_length);
    push @suggestion, "for $word, expected one of: " . join(', ', map { qq["$_"] } @expected);

    push @suggestions, [@suggestion];
  }

  warn "$nid ($date): Unable to parse this sentence:\n  $sentence\n  $reading_field\n" . join("", map { "  $_\n" } map { (map { @$_ } $_), "" } @suggestions) . "\n";
}, '廣東話文');

if ($print_correct) {
  for my $word (@tsv_words) {
    say $anki_date_of{$word} || $tsv_date_of{$word};
  }
}
else {
  for my $word (sort { $anki_date_of{$a} cmp $anki_date_of{$b} } keys %anki_date_of) {
      if ($tsv_date_of{$word} ne $anki_date_of{$word}) {
        warn "word '$word' first added to anki $anki_date_of{$word} but added to tsv $tsv_date_of{$word})";
        next;
      }
  }
}
