#!/usr/bin/env perl
use strict;
use warnings;
use utf8::all;
use Anki::Database;

my $MODEL = '粵語文';
my $SENTENCE = '粵語';
my $READING = '発音';
my $SOURCE = '出所';

my ($sender, @recipients) = @ARGV or die "usage: $0 sender recipient...";
my $anki = Anki::Database->new;
my ($today, $tomorrow);
my $today_count;

open my $handle, 'canto-targets |' or die $!;
while (<$handle>) {
  my ($count, $word) = /^(\d+)x (.+)$/;
  die "cannot parse: $_" unless $count;
  if (!$today) {
    $today = $word;
    $today_count = $count;
  } elsif (!$tomorrow) {
    $tomorrow = $word;
  } else {
    last;
  }
}

my $reading = reading($today);
die "no reading: $today" if !$reading;
print "From: $sender\n";
print "To: " . join(', ', @recipients) . "\n";
print "Content-Type: text/html; charset=UTF-8\n";
print "Subject: ★$today★ ($reading) ${today_count}x - Shawn's Cantonese word of the day\n\n";

print q{<body style="font-size: 1.3em">};
print qq{<h1 style="color: #EB37C1; margin: 0">$today</h1>\n};
print "<h3>($reading)</h3>\n";
print "\n";

print "<br /><br />Examples:<br />";
print qq{<ol style="font-size: 1.2em">\n};
#my $i = 1;
for my $card (cards($today)) {
  # print $i++ . ". ";
  my $s = tidy($card->field($SENTENCE));
  $s =~ s{$today}{<b style="color: #EB37C1">$today</b>}g;

  my $r = tidy($card->field($READING));
  $r =~ s{$reading}{<u>$reading</u>}g;

  my $source = tidy($card->field($SOURCE));
  print qq{<li><span style="font-size: 1.1em">$s</span><br />$r<br /><span style="color: gray; font-size: 0.9em">(from: $source)</span><br /><br /></li>\n\n};
}
print "</ol>";

if ($tomorrow) {
  my $reading = reading($tomorrow);
  print qq{<hr \><p>Tomorrow's word of the day: $tomorrow ($reading)</p>};
}

print "</body>";

sub reading {
  my $needle = shift;
  my $n = join '', grep {/\p{Han}/} split '', $needle;

  open my $handle, '<', "$ENV{HOME}/Dropbox/Documents/metrics/cantonese/vocabulary.tsv" or die $!;
  while (<$handle>) {
    chomp;
    my ($date, $word, $reading) = split "\t", $_;
    my $w = join '', grep {/\p{Han}/} split '', $word;
    return $reading if $word eq $needle || $w eq $n;
  }
  return;
}

sub cards {
  my $word = shift;
  my @cards;
  $anki->each_card(sub {
      my ($card) = @_;
  
      return if $card->suspended;
  
      my $sentence = $card->field($SENTENCE);

      # TODO: wordify-cantonese
      return unless $sentence =~ $word;

      push @cards, $card;
  }, $MODEL);

  return sort { $a->id <=> $b->id } @cards;
}

sub tidy {
  my $x = shift;
  $x =~ s/<.*?>//g;
  return $x;
}
